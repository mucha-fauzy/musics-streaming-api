definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Songs:
    properties:
      album:
        type: string
      artist:
        type: string
      created_at:
        type: string
      duration:
        type: string
      genre:
        type: string
      id:
        type: string
      release_date:
        type: string
      stream_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.UpdateSongs:
    properties:
      album:
        type: string
      artist:
        type: string
      duration:
        type: string
      genre:
        type: string
      id:
        type: string
      release_date:
        type: string
      stream_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/songs:
    get:
      description: Get a list of all songs with optional filtering, sorting, and pagination
      parameters:
      - description: Filter by song title
        in: query
        name: title
        type: string
      - description: Sort by 'release_date' or 'duration'
        in: query
        name: sort_by
        type: string
      - description: Order by 'asc' or 'desc'
        in: query
        name: order
        type: string
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Number of songs per page (default 5)
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Songs'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all songs
    post:
      description: Create a new song with the given details
      parameters:
      - description: New song details
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.Songs'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Songs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new song
  /api/v1/songs/{id}:
    delete:
      description: Delete a song with the given ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a song
    put:
      description: Update an existing song with the given details
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated song details
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSongs'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Songs'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update an existing song
swagger: "2.0"
